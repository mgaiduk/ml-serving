import os
import json
import xgboost as xgb
import pandas as pd

features = ['TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_1M','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_5M','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_15M','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_1H','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_6H','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_1D','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_7D','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_30D','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_1M','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_5M','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_15M','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_1H','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_6H','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_1D','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_7D','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_30D','TAKENBY_CFMEDIADWELLTIMESIGNAL_1M','TAKENBY_CFMEDIADWELLTIMESIGNAL_5M','TAKENBY_CFMEDIADWELLTIMESIGNAL_15M','TAKENBY_CFMEDIADWELLTIMESIGNAL_1H','TAKENBY_CFMEDIADWELLTIMESIGNAL_6H','TAKENBY_CFMEDIADWELLTIMESIGNAL_1D','TAKENBY_CFMEDIADWELLTIMESIGNAL_7D','TAKENBY_CFMEDIADWELLTIMESIGNAL_30D','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_1M','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_5M','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_15M','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_1H','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_6H','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_1D','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_7D','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_30D','TAKENBY_CFMEDIAVIEWEDSIGNAL_1M','TAKENBY_CFMEDIAVIEWEDSIGNAL_5M','TAKENBY_CFMEDIAVIEWEDSIGNAL_15M','TAKENBY_CFMEDIAVIEWEDSIGNAL_1H','TAKENBY_CFMEDIAVIEWEDSIGNAL_6H','TAKENBY_CFMEDIAVIEWEDSIGNAL_1D','TAKENBY_CFMEDIAVIEWEDSIGNAL_7D','TAKENBY_CFMEDIAVIEWEDSIGNAL_30D','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_1M','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_5M','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_15M','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_1H','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_6H','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_1D','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_7D','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_30D','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_1M','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_5M','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_15M','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_1H','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_6H','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_1D','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_7D','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_30D','MEDIA_CFMEDIADWELLTIMESIGNAL_1M','MEDIA_CFMEDIADWELLTIMESIGNAL_5M','MEDIA_CFMEDIADWELLTIMESIGNAL_15M','MEDIA_CFMEDIADWELLTIMESIGNAL_1H','MEDIA_CFMEDIADWELLTIMESIGNAL_6H','MEDIA_CFMEDIADWELLTIMESIGNAL_1D','MEDIA_CFMEDIADWELLTIMESIGNAL_7D','MEDIA_CFMEDIADWELLTIMESIGNAL_30D','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_1M','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_5M','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_15M','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_1H','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_6H','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_1D','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_7D','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_30D','MEDIA_CFMEDIAVIEWEDSIGNAL_1M','MEDIA_CFMEDIAVIEWEDSIGNAL_5M','MEDIA_CFMEDIAVIEWEDSIGNAL_15M','MEDIA_CFMEDIAVIEWEDSIGNAL_1H','MEDIA_CFMEDIAVIEWEDSIGNAL_6H','MEDIA_CFMEDIAVIEWEDSIGNAL_1D','MEDIA_CFMEDIAVIEWEDSIGNAL_7D','MEDIA_CFMEDIAVIEWEDSIGNAL_30D','USER_CFMEDIAADDEDCOMMENTSIGNAL_1M','USER_CFMEDIAADDEDCOMMENTSIGNAL_5M','USER_CFMEDIAADDEDCOMMENTSIGNAL_15M','USER_CFMEDIAADDEDCOMMENTSIGNAL_1H','USER_CFMEDIAADDEDCOMMENTSIGNAL_6H','USER_CFMEDIAADDEDCOMMENTSIGNAL_1D','USER_CFMEDIAADDEDCOMMENTSIGNAL_7D','USER_CFMEDIAADDEDCOMMENTSIGNAL_30D','USER_CFMEDIAADDEDREACTIONSIGNAL_1M','USER_CFMEDIAADDEDREACTIONSIGNAL_5M','USER_CFMEDIAADDEDREACTIONSIGNAL_15M','USER_CFMEDIAADDEDREACTIONSIGNAL_1H','USER_CFMEDIAADDEDREACTIONSIGNAL_6H','USER_CFMEDIAADDEDREACTIONSIGNAL_1D','USER_CFMEDIAADDEDREACTIONSIGNAL_7D','USER_CFMEDIAADDEDREACTIONSIGNAL_30D','USER_CFMEDIADWELLTIMESIGNAL_1M','USER_CFMEDIADWELLTIMESIGNAL_5M','USER_CFMEDIADWELLTIMESIGNAL_15M','USER_CFMEDIADWELLTIMESIGNAL_1H','USER_CFMEDIADWELLTIMESIGNAL_6H','USER_CFMEDIADWELLTIMESIGNAL_1D','USER_CFMEDIADWELLTIMESIGNAL_7D','USER_CFMEDIADWELLTIMESIGNAL_30D','USER_CFMEDIATAPPEDTAKENBYSIGNAL_1M','USER_CFMEDIATAPPEDTAKENBYSIGNAL_5M','USER_CFMEDIATAPPEDTAKENBYSIGNAL_15M','USER_CFMEDIATAPPEDTAKENBYSIGNAL_1H','USER_CFMEDIATAPPEDTAKENBYSIGNAL_6H','USER_CFMEDIATAPPEDTAKENBYSIGNAL_1D','USER_CFMEDIATAPPEDTAKENBYSIGNAL_7D','USER_CFMEDIATAPPEDTAKENBYSIGNAL_30D','USER_CFMEDIAVIEWEDSIGNAL_1M','USER_CFMEDIAVIEWEDSIGNAL_5M','USER_CFMEDIAVIEWEDSIGNAL_15M','USER_CFMEDIAVIEWEDSIGNAL_1H','USER_CFMEDIAVIEWEDSIGNAL_6H','USER_CFMEDIAVIEWEDSIGNAL_1D','USER_CFMEDIAVIEWEDSIGNAL_7D','USER_CFMEDIAVIEWEDSIGNAL_30D','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_1M','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_5M','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_15M','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_1H','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_6H','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_1D','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_7D','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_30D','CROSS_CFMEDIAADDEDREACTIONSIGNAL_1M','CROSS_CFMEDIAADDEDREACTIONSIGNAL_5M','CROSS_CFMEDIAADDEDREACTIONSIGNAL_15M','CROSS_CFMEDIAADDEDREACTIONSIGNAL_1H','CROSS_CFMEDIAADDEDREACTIONSIGNAL_6H','CROSS_CFMEDIAADDEDREACTIONSIGNAL_1D','CROSS_CFMEDIAADDEDREACTIONSIGNAL_7D','CROSS_CFMEDIAADDEDREACTIONSIGNAL_30D','CROSS_CFMEDIADWELLTIMESIGNAL_1M','CROSS_CFMEDIADWELLTIMESIGNAL_5M','CROSS_CFMEDIADWELLTIMESIGNAL_15M','CROSS_CFMEDIADWELLTIMESIGNAL_1H','CROSS_CFMEDIADWELLTIMESIGNAL_6H','CROSS_CFMEDIADWELLTIMESIGNAL_1D','CROSS_CFMEDIADWELLTIMESIGNAL_7D','CROSS_CFMEDIADWELLTIMESIGNAL_30D','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_1M','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_5M','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_15M','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_1H','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_6H','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_1D','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_7D','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_30D','CROSS_CFMEDIAVIEWEDSIGNAL_1M','CROSS_CFMEDIAVIEWEDSIGNAL_5M','CROSS_CFMEDIAVIEWEDSIGNAL_15M','CROSS_CFMEDIAVIEWEDSIGNAL_1H','CROSS_CFMEDIAVIEWEDSIGNAL_6H','CROSS_CFMEDIAVIEWEDSIGNAL_1D','CROSS_CFMEDIAVIEWEDSIGNAL_7D','CROSS_CFMEDIAVIEWEDSIGNAL_30D']

def model_fn(model_dir):
    bst = xgb.Booster()
    bst.load_model(os.path.join(model_dir, "xgboost-model"))
    return bst

def input_fn(request_body, request_content_type):
    assert request_content_type=='application/json'
    df = pd.DataFrame(json.loads(request_body))
    dmatrix = xgb.DMatrix(df)
    return dmatrix

def predict_fn(dmatrix, bst):
    # bst holds feature names 
    # dmatrix does as well, so there is no problems with potential order mismatch
    # missing features are assumed to be null
    predictions = bst.predict(dmatrix)
    return predictions

def output_fn(predictions, content_type):
    assert content_type == 'application/json'
    return json.dumps(predictions.tolist())