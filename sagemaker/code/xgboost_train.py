import argparse
from datetime import datetime, timedelta
import os
import pandas as pd
import snowflake.connector
from sklearn.metrics import roc_auc_score
import xgboost as xgb

from snowflake_utils import connect

def collect_dataset(ctx: snowflake.connector.SnowflakeConnection, input: str) -> pd.DataFrame:
    print("Loading dataset!")
    # train on a 7-day lookback window
    filter_time = (datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d')
    # Collect dataset
    sql = f"""
    select * from {input}
    where min_timestamp >= '{filter_time}'
    """
    df = pd.read_sql(sql, ctx)
    return df

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--input', type=str, required=True,
                    help='Input dataset snowflake table')
    parser.add_argument("--profile-name", type=str, required=False, help="sso profile for aws cli")
    parser.add_argument("--lr", type=float, default=0.05)
    parser.add_argument("--n-estimators", type=int, default=100)
    parser.add_argument('--model-dir', type=str, default=os.environ['SM_MODEL_DIR'], help="Model dir to save model from within sagemaker pipeline")
    args = parser.parse_args()

    secret_id = os.environ["SECRET_ID"]
    account = os.environ["SF_ACCOUNT"]
    warehouse = os.environ["SF_WAREHOUSE"]
    database = os.environ["SF_DATABASE"].upper()
    schema = os.environ["SF_SCHEMA"].upper()
    region = os.environ["AWS_REGION"]
    print("Started!")
    protocol = "https"
    ctx = connect(secret_id, account, warehouse, database, schema, protocol, region, profile_name=args.profile_name)
    df = collect_dataset(ctx, input=args.input)
    print("Df shape: ", df.shape)
    df["HAS_REACTIONS"] = df["NREACTIONS"] > 0

    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')

    val_df = df[df["MIN_TIMESTAMP"] > yesterday]
    train_df = df[df["MIN_TIMESTAMP"] <= yesterday]
    print("Train df shape: ", train_df.shape)
    print("Val df shape: ", val_df.shape)
    features = ['TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_1M','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_5M','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_15M','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_1H','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_6H','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_1D','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_7D','TAKENBY_CFMEDIAADDEDCOMMENTSIGNAL_30D','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_1M','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_5M','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_15M','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_1H','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_6H','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_1D','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_7D','TAKENBY_CFMEDIAADDEDREACTIONSIGNAL_30D','TAKENBY_CFMEDIADWELLTIMESIGNAL_1M','TAKENBY_CFMEDIADWELLTIMESIGNAL_5M','TAKENBY_CFMEDIADWELLTIMESIGNAL_15M','TAKENBY_CFMEDIADWELLTIMESIGNAL_1H','TAKENBY_CFMEDIADWELLTIMESIGNAL_6H','TAKENBY_CFMEDIADWELLTIMESIGNAL_1D','TAKENBY_CFMEDIADWELLTIMESIGNAL_7D','TAKENBY_CFMEDIADWELLTIMESIGNAL_30D','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_1M','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_5M','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_15M','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_1H','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_6H','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_1D','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_7D','TAKENBY_CFMEDIATAPPEDTAKENBYSIGNAL_30D','TAKENBY_CFMEDIAVIEWEDSIGNAL_1M','TAKENBY_CFMEDIAVIEWEDSIGNAL_5M','TAKENBY_CFMEDIAVIEWEDSIGNAL_15M','TAKENBY_CFMEDIAVIEWEDSIGNAL_1H','TAKENBY_CFMEDIAVIEWEDSIGNAL_6H','TAKENBY_CFMEDIAVIEWEDSIGNAL_1D','TAKENBY_CFMEDIAVIEWEDSIGNAL_7D','TAKENBY_CFMEDIAVIEWEDSIGNAL_30D','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_1M','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_5M','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_15M','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_1H','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_6H','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_1D','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_7D','MEDIA_CFMEDIAADDEDCOMMENTSIGNAL_30D','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_1M','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_5M','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_15M','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_1H','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_6H','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_1D','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_7D','MEDIA_CFMEDIAADDEDREACTIONSIGNAL_30D','MEDIA_CFMEDIADWELLTIMESIGNAL_1M','MEDIA_CFMEDIADWELLTIMESIGNAL_5M','MEDIA_CFMEDIADWELLTIMESIGNAL_15M','MEDIA_CFMEDIADWELLTIMESIGNAL_1H','MEDIA_CFMEDIADWELLTIMESIGNAL_6H','MEDIA_CFMEDIADWELLTIMESIGNAL_1D','MEDIA_CFMEDIADWELLTIMESIGNAL_7D','MEDIA_CFMEDIADWELLTIMESIGNAL_30D','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_1M','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_5M','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_15M','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_1H','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_6H','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_1D','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_7D','MEDIA_CFMEDIATAPPEDTAKENBYSIGNAL_30D','MEDIA_CFMEDIAVIEWEDSIGNAL_1M','MEDIA_CFMEDIAVIEWEDSIGNAL_5M','MEDIA_CFMEDIAVIEWEDSIGNAL_15M','MEDIA_CFMEDIAVIEWEDSIGNAL_1H','MEDIA_CFMEDIAVIEWEDSIGNAL_6H','MEDIA_CFMEDIAVIEWEDSIGNAL_1D','MEDIA_CFMEDIAVIEWEDSIGNAL_7D','MEDIA_CFMEDIAVIEWEDSIGNAL_30D','USER_CFMEDIAADDEDCOMMENTSIGNAL_1M','USER_CFMEDIAADDEDCOMMENTSIGNAL_5M','USER_CFMEDIAADDEDCOMMENTSIGNAL_15M','USER_CFMEDIAADDEDCOMMENTSIGNAL_1H','USER_CFMEDIAADDEDCOMMENTSIGNAL_6H','USER_CFMEDIAADDEDCOMMENTSIGNAL_1D','USER_CFMEDIAADDEDCOMMENTSIGNAL_7D','USER_CFMEDIAADDEDCOMMENTSIGNAL_30D','USER_CFMEDIAADDEDREACTIONSIGNAL_1M','USER_CFMEDIAADDEDREACTIONSIGNAL_5M','USER_CFMEDIAADDEDREACTIONSIGNAL_15M','USER_CFMEDIAADDEDREACTIONSIGNAL_1H','USER_CFMEDIAADDEDREACTIONSIGNAL_6H','USER_CFMEDIAADDEDREACTIONSIGNAL_1D','USER_CFMEDIAADDEDREACTIONSIGNAL_7D','USER_CFMEDIAADDEDREACTIONSIGNAL_30D','USER_CFMEDIADWELLTIMESIGNAL_1M','USER_CFMEDIADWELLTIMESIGNAL_5M','USER_CFMEDIADWELLTIMESIGNAL_15M','USER_CFMEDIADWELLTIMESIGNAL_1H','USER_CFMEDIADWELLTIMESIGNAL_6H','USER_CFMEDIADWELLTIMESIGNAL_1D','USER_CFMEDIADWELLTIMESIGNAL_7D','USER_CFMEDIADWELLTIMESIGNAL_30D','USER_CFMEDIATAPPEDTAKENBYSIGNAL_1M','USER_CFMEDIATAPPEDTAKENBYSIGNAL_5M','USER_CFMEDIATAPPEDTAKENBYSIGNAL_15M','USER_CFMEDIATAPPEDTAKENBYSIGNAL_1H','USER_CFMEDIATAPPEDTAKENBYSIGNAL_6H','USER_CFMEDIATAPPEDTAKENBYSIGNAL_1D','USER_CFMEDIATAPPEDTAKENBYSIGNAL_7D','USER_CFMEDIATAPPEDTAKENBYSIGNAL_30D','USER_CFMEDIAVIEWEDSIGNAL_1M','USER_CFMEDIAVIEWEDSIGNAL_5M','USER_CFMEDIAVIEWEDSIGNAL_15M','USER_CFMEDIAVIEWEDSIGNAL_1H','USER_CFMEDIAVIEWEDSIGNAL_6H','USER_CFMEDIAVIEWEDSIGNAL_1D','USER_CFMEDIAVIEWEDSIGNAL_7D','USER_CFMEDIAVIEWEDSIGNAL_30D','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_1M','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_5M','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_15M','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_1H','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_6H','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_1D','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_7D','CROSS_CFMEDIAADDEDCOMMENTSIGNAL_30D','CROSS_CFMEDIAADDEDREACTIONSIGNAL_1M','CROSS_CFMEDIAADDEDREACTIONSIGNAL_5M','CROSS_CFMEDIAADDEDREACTIONSIGNAL_15M','CROSS_CFMEDIAADDEDREACTIONSIGNAL_1H','CROSS_CFMEDIAADDEDREACTIONSIGNAL_6H','CROSS_CFMEDIAADDEDREACTIONSIGNAL_1D','CROSS_CFMEDIAADDEDREACTIONSIGNAL_7D','CROSS_CFMEDIAADDEDREACTIONSIGNAL_30D','CROSS_CFMEDIADWELLTIMESIGNAL_1M','CROSS_CFMEDIADWELLTIMESIGNAL_5M','CROSS_CFMEDIADWELLTIMESIGNAL_15M','CROSS_CFMEDIADWELLTIMESIGNAL_1H','CROSS_CFMEDIADWELLTIMESIGNAL_6H','CROSS_CFMEDIADWELLTIMESIGNAL_1D','CROSS_CFMEDIADWELLTIMESIGNAL_7D','CROSS_CFMEDIADWELLTIMESIGNAL_30D','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_1M','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_5M','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_15M','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_1H','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_6H','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_1D','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_7D','CROSS_CFMEDIATAPPEDTAKENBYSIGNAL_30D','CROSS_CFMEDIAVIEWEDSIGNAL_1M','CROSS_CFMEDIAVIEWEDSIGNAL_5M','CROSS_CFMEDIAVIEWEDSIGNAL_15M','CROSS_CFMEDIAVIEWEDSIGNAL_1H','CROSS_CFMEDIAVIEWEDSIGNAL_6H','CROSS_CFMEDIAVIEWEDSIGNAL_1D','CROSS_CFMEDIAVIEWEDSIGNAL_7D','CROSS_CFMEDIAVIEWEDSIGNAL_30D']
    target = "HAS_REACTIONS"

    dtrain = xgb.DMatrix(train_df[features], label=train_df[target])
    dval = xgb.DMatrix(val_df[features], label=val_df[target])

    params = {
        'objective': 'binary:logistic',  # Binary classification
        'max_depth': 6,                  # Depth of each tree
        'alpha': 1,                     # L1 regularization term on weights
        'learning_rate': args.lr,           # Step size shrinkage used in update to prevents overfitting
    }
    evals = [(dtrain, 'train'), (dval, 'val')]
    bst = xgb.train(params, dtrain, num_boost_round=args.n_estimators, evals=evals)
    y_pred = bst.predict(dval)
    auc_score = roc_auc_score(val_df[target], y_pred)
    print(f"Validation AUC: {auc_score:.3f}")
    
    bst.save_model(os.path.join(args.model_dir, 'xgboost-model'))

if __name__ == "__main__":
    main()